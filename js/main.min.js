'use strict';
import { nanoid } from 'https://cdn.jsdelivr.net/npm/nanoid/nanoid.js';

const body = document.body;
const mobilePopup = document.querySelector('.mobile-popup');
const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputCadence = document.querySelector('.form__input--temp');
const inputElevation = document.querySelector('.form__input--climb');
const sidebar = document.querySelector('.sidebar');
const btnTrash = document.querySelector('.btn--trash');
const mapContainerById = document.querySelector('#map');
const btnBack = document.querySelector('.btn-back');
const formInput = document.querySelectorAll('.form__input');
const distanceInput = document.querySelector('.form__input--distance');
const durationInput = document.querySelector('.form__input--duration');
const tempInput = document.querySelector('.form__input--temp');
const climbInput = document.querySelector('.form__input--climb');
const btnSortDuration = document.querySelector('.btn-sort--duration');
const btnSortDistance = document.querySelector('.btn-sort--distance');
const overlay = document.querySelector('.overlay');
const modalWindow = document.querySelector('.modal-window');
const modalWindowMobileText = document.querySelector('.text--mobile');
const modalWindowDesktopText = document.querySelector('.text--desktop');
const modalInfoWorkout = document.querySelector('.info-workout');
const btnCloseInfoWorkout = document.querySelector('.btn-close-edit-Workout');
const editForm = document.querySelector('.edit-form');
const editDistance = document.querySelector('.edit__distance');
const editDuration = document.querySelector('.edit__duration');
const editTemp = document.querySelector('.edit__temp');
const editClimb = document.querySelector('.edit__climb');
const editType = document.querySelector('.edit__type');

class App {
  #mapEvent;
  #map;
  #workouts = [];

  constructor() {
    this.click = 0;
    this.timeOut = 0;
    this.distanceSort = 0;
    this.durationSort = 0;
    //this._reset();
    this._getPosition();
    form.addEventListener('submit', this._newWorkout.bind(this));
    sidebar.addEventListener('click', this._hideWorkoutForm.bind(this));
    inputType.addEventListener('change', this._toggleClimbField.bind(this));
    editType.addEventListener('change', function () {
      editTemp.closest('.form__row').classList.toggle('form__row--hidden');
      editClimb.closest('.form__row').classList.toggle('form__row--hidden');
    });
    containerWorkouts.addEventListener('click', this._moveToWorkout.bind(this));
    this._getLocalStorageData();
    btnTrash.addEventListener('click', this._deleteAllWorkouts.bind(this));
    btnBack.addEventListener('click', this._hideWorkoutFormMobile.bind(this));
    btnSortDistance.addEventListener(
      'click',
      this._sortDataDistance.bind(this)
    );
    btnSortDuration.addEventListener(
      'click',
      this._sortDataDuration.bind(this)
    );
    btnCloseInfoWorkout.addEventListener(
      'click',
      this._closeModalWindow.bind(this, modalInfoWorkout)
    );
    overlay.addEventListener(
      'click',
      this._closeModalWindow.bind(this, modalInfoWorkout)
    );
    document.addEventListener('keydown', function (e) {
      if (e.key === 'Escape') {
        app._closeModalWindow(modalInfoWorkout);
      }
    });
  }
  _getPosition() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        this._loadMap.bind(this),
        this._errorLoadMap
      );
    } else {
      alert(
        '–î–∞–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –Ω–∞ –¥—Ä—É–≥–æ–º –±—Ä–∞–∑—É—Ä–µ.'
      );
    }
  }

  _errorLoadMap() {
    if (document.documentElement.scrollWidth > 1200) {
      modalWindowMobileText.style.display = 'none';
      modalWindowDesktopText.style.display = 'block';
    } else {
      modalWindowMobileText.style.display = 'block';
      modalWindowDesktopText.style.display = 'none';
    }
    modalWindow.style.display = 'block';
    overlay.style.display = 'block';
  }

  _loadMap(position) {
    const { latitude, longitude } = position.coords;
    this.#map = L.map('map').setView([latitude, longitude], 13);

    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this.#map);
    this.#map.on('click', this._showForm.bind(this));
    this.#workouts.forEach(workout => this._showPoint(workout));
  }

  _showForm(e) {
    if (document.documentElement.scrollWidth <= 719) {
      mapContainerById.style.display = 'none';
      sidebar.style.display = 'flex';
      mobilePopup.style.display = 'none';
    }

    this.#mapEvent = e;
    form.classList.remove('hidden');
    inputDistance.focus();
  }

  _hideForm() {
    form.classList.add('hidden');
  }

  _toggleClimbField() {
    inputCadence.parentElement.classList.toggle('form__row--hidden');
    inputElevation.parentElement.classList.toggle('form__row--hidden');
  }

  _newWorkout(e) {
    e.preventDefault();
    const { lat, lng } = this.#mapEvent.latlng;
    const type = inputType.value;
    const distance = +inputDistance.value;
    const duration = +inputDuration.value;
    let workout;

    const isError = value => {
      if (Number.isFinite(value) && value > 0 && value < 1000) {
        return false;
      } else {
        return true;
      }
    };

    if (type === 'running') {
      let errors = 0;
      const cadence = +inputCadence.value;
      if (isError(distance)) {
        distanceInput.style.border = 'solid 1px red';
        errors++;
      } else distanceInput.style.border = 'none';
      if (isError(duration)) {
        durationInput.style.border = 'solid 1px red';
        errors++;
      } else durationInput.style.border = 'none';
      if (isError(cadence)) {
        tempInput.style.border = 'solid 1px red';
        errors++;
      } else tempInput.style.border = 'none';
      if (errors > 0) return;
      workout = new Running(distance, duration, [lat, lng], cadence);
    }

    if (type === 'cycling') {
      let errors = 0;
      const elevation = +inputElevation.value;
      if (isError(distance)) {
        distanceInput.style.border = 'solid 1px red';
        errors++;
      } else distanceInput.style.border = 'none';
      if (isError(duration)) {
        durationInput.style.border = 'solid 1px red';
        errors++;
      } else durationInput.style.border = 'none';
      if (isError(elevation)) {
        climbInput.style.border = 'solid 1px red';
        errors++;
      } else climbInput.style.border = 'none';
      if (errors > 0) return;
      workout = new Cycling(distance, duration, [lat, lng], elevation);
    }
    this._showPoint(workout);
    this.#workouts.push(workout);
    this._addWorkoutsToLocalStorage.call(this);
    this._displayWorkoutToSidebar(workout);
    this._hideForm();
  }
  _showPoint(workout) {
    // CUSTOM ICON OF THE POPUP
    // const LeafIcon = L.Icon.extend({
    //   options: {
    //     iconSize: [64, 64],
    //     shadowSize: [51, 37],
    //     iconAnchor: [32, 37],
    //     shadowAnchor: [16, 37],
    //     popupAnchor: [0, -30],
    //   },
    // });
    // const icon = new LeafIcon({ iconUrl: './popup-img.png' });
    inputDistance.value =
      inputDuration.value =
      inputCadence.value =
      inputElevation.value =
        '';

    L.marker(workout.coords)
      .addTo(this.#map)
      .bindPopup(
        L.popup({
          content: `${workout.type === 'running' ? 'üèÉ' : 'üöµ‚Äç‚ôÇÔ∏è'} ${
            workout.date
          }`,
          maxWidth: 110,
          maxHeight: 30,
          autoClose: false,
          className: `${workout.type}-popup`,
          closeOnClick: false,
        })
      )
      .openPopup();
  }

  _displayWorkoutToSidebar(workout) {
    const html = `<li class="workout workout--running" data-id="${workout._id}">
          <h2 class="workout__title">${
            workout.type === 'running' ? '–ü—Ä–æ–±–µ–∂–∫–∞' : '–í–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'
          } ${workout.date}</h2>
          <button class="btn-workout-edit"><span class="visually-hidden">–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</span></button>
          <div class="workout__details">
            <span class="workout__icon">${
              workout.type === 'running' ? 'üèÉ' : 'üöµ‚Äç‚ôÇÔ∏è'
            }</span>
            <span class="workout__value">${+workout.distance.toFixed(2)}</span>
            <span class="workout__unit">–∫–º</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">‚åö</span>
            <span class="workout__value">${Math.round(workout.duration)}</span>
            <span class="workout__unit">–º–∏–Ω</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">üìè</span>
            <span class="workout__value">${
              workout.type === 'running'
                ? `${+workout.pace.toFixed(2)}`
                : `${+workout.speed.toFixed(2)}`
            }</span>
            <span class="workout__unit">${
              workout.type === 'running' ? '–º–∏–Ω/–∫–º' : '–∫–º/—á'
            }</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">${
              workout.type === 'running' ? '‚è±' : 'üèî'
            }</span>
            <span class="workout__value">${
              workout.type === 'running'
                ? `${Math.round(workout.temp)}`
                : `${Math.round(workout.climb)}`
            }</span>
            <span class="workout__unit">${
              workout.type === 'running' ? '—à–∞–≥/–º–∏–Ω' : '–º'
            }</span>
          </div>
        </li>`;
    form.insertAdjacentHTML('afterend', html);
  }

  _moveToWorkout(e) {
    const workoutELement = e.target.closest('.workout');
    const workoutEditElement = e.target.closest('.btn-workout-edit');
    if (workoutEditElement) {
      return this._showEditModal.call(this, workoutELement.dataset.id);
    }
    if (!workoutELement) return;
    this.click++;
    this.timeOut;
    if (this.click === 1) {
      this.timeOut = setTimeout(() => {
        if (document.documentElement.scrollWidth <= 767.9)
          return (this.click = 0);
        const workout = this.#workouts.find(
          item => item._id == workoutELement.dataset.id
        );
        workout.click();
        this.#map.setView(workout.coords, 13, {
          animate: true,
          pan: {
            duration: 1,
          },
        });
        this.click = 0;
      }, 200);
    } else {
      this.click = 0;
      clearTimeout(this.timeOut);
      this._deleteWorkout.call(this, e);
    }
  }

  _addWorkoutsToLocalStorage() {
    localStorage.setItem('workouts', JSON.stringify(this.#workouts));
  }

  _getLocalStorageData() {
    const localDate = JSON.parse(localStorage.getItem('workouts'));
    if (!localDate) return;
    localDate.forEach(date => {
      if (date.type === 'running') {
        this.#workouts.push(
          new Running(date.distance, date.duration, date.coords, date.temp)
        );
      }
      if (date.type === 'cycling') {
        this.#workouts.push(
          new Cycling(date.distance, date.duration, date.coords, date.climb)
        );
      }
    });

    this.#workouts.forEach(work => this._displayWorkoutToSidebar(work));
  }

  _reset() {
    localStorage.removeItem('workouts');
  }

  _deleteWorkout(e) {
    const workoutELement = e.target.closest('.workout');
    if (!workoutELement) return;
    const workoutIndex = this.#workouts.findIndex(
      item => item._id == workoutELement.dataset.id
    );
    this.#workouts.splice(workoutIndex, 1);
    this._reset();
    workoutELement.remove();
    this._addWorkoutsToLocalStorage();
    if (document.documentElement.scrollWidth <= 767.9) return;
    location.reload();
  }

  _deleteWorkoutPoint(workout) {}

  _clearAll(elements) {
    elements.forEach(el => el.remove());
  }

  _hideWorkoutForm(e) {
    if (document.documentElement.scrollWidth <= 767.9) return;
    if (
      e.target.classList.contains('sidebar') ||
      e.target.classList.contains('workouts') ||
      e.target.classList.contains('footer__copyright') ||
      e.target.classList.contains('icon')
    ) {
      form.classList.add('hidden');
    } else {
      return;
    }
  }

  _hideWorkoutFormMobile(e) {
    mapContainerById.style.display = 'block';
    sidebar.style.display = 'none';
    mobilePopup.style.display = 'block';
    location.reload();
  }

  _deleteAllWorkouts() {
    this._reset();
    location.reload();
  }

  _sortDataDistance() {
    this.distanceSort++;
    btnSortDuration.classList.remove('btn-sort--down', 'btn-sort--up');
    btnSortDistance.classList.remove('btn-sort--down', 'btn-sort--up');
    if (this.distanceSort === 3) {
      this._clearWorkoutsList();
      this.#workouts.forEach(work => this._displayWorkoutToSidebar(work));
      return (this.distanceSort = 0);
    }
    const sortArr = this.#workouts.slice();
    if (this.distanceSort === 1) {
      sortArr.sort((x, y) => x.distance - y.distance);
      btnSortDistance.classList.add('btn-sort--up');
    }
    if (this.distanceSort === 2) {
      sortArr.sort((x, y) => y.distance - x.distance);
      btnSortDistance.classList.add('btn-sort--down');
    }
    this._clearWorkoutsList();
    sortArr.forEach(work => this._displayWorkoutToSidebar(work));
  }

  _sortDataDuration() {
    this.durationSort++;
    btnSortDuration.classList.remove('btn-sort--down', 'btn-sort--up');
    btnSortDistance.classList.remove('btn-sort--down', 'btn-sort--up');
    if (this.durationSort === 3) {
      this._clearWorkoutsList();
      this.#workouts.forEach(work => this._displayWorkoutToSidebar(work));
      return (this.durationSort = 0);
    }
    const sortArr = this.#workouts.slice();
    if (this.durationSort === 1) {
      sortArr.sort((x, y) => x.duration - y.duration);
      btnSortDuration.classList.add('btn-sort--up');
    }
    if (this.durationSort === 2) {
      sortArr.sort((x, y) => y.duration - x.duration);
      btnSortDuration.classList.add('btn-sort--down');
    }
    this._clearWorkoutsList();
    sortArr.forEach(work => this._displayWorkoutToSidebar(work));
  }

  _clearWorkoutsList() {
    while (containerWorkouts.children.length > 1) {
      containerWorkouts.removeChild(containerWorkouts.lastElementChild);
    }
  }

  _showEditModal(workoutEditElementId) {
    overlay.style.display = 'block';
    modalInfoWorkout.style.display = 'block';
    this._loadDataEditForm.call(this, workoutEditElementId);
  }

  _closeModalWindow(modal) {
    modal.style.display = 'none';
    overlay.style.display = 'none';
  }

  _loadDataEditForm(id) {
    const currentWorkout = this.#workouts.find(item => item._id === id);
    const index = this.#workouts.findIndex(
      item => item._id === currentWorkout._id
    );

    if (currentWorkout.type === 'running') {
      editTemp.closest('.form__row').classList.remove('form__row--hidden');
      editClimb.closest('.form__row').classList.add('form__row--hidden');
    }
    if (currentWorkout.type === 'cycling') {
      editClimb.closest('.form__row').classList.remove('form__row--hidden');
      editTemp.closest('.form__row').classList.add('form__row--hidden');
    }
    editType.value = currentWorkout.type;
    editDistance.value = currentWorkout.distance;
    editDuration.value = currentWorkout.duration;
    currentWorkout.type === 'running'
      ? (editTemp.value = currentWorkout.temp)
      : (editClimb.value = currentWorkout.climb);

    editForm.addEventListener('submit', e => {
      e.preventDefault();
      currentWorkout.type = editType.value;
      currentWorkout.distance = +editDistance.value;
      currentWorkout.duration = +editDuration.value;
      if (currentWorkout.type === 'running') {
        Object.setPrototypeOf(currentWorkout, Running.prototype);
        currentWorkout.calculatePace();
        currentWorkout.temp = +editTemp.value;
        try {
          delete currentWorkout.climb;
        } catch {}
      }
      if (currentWorkout.type === 'cycling') {
        Object.setPrototypeOf(currentWorkout, Cycling.prototype);
        console.log(currentWorkout);
        currentWorkout.calculateSpeed();
        currentWorkout.climb = +editClimb.value;
        try {
          delete currentWorkout.temp;
        } catch {}
      }
      this._editDataWorkout.call(this, index, currentWorkout);
    });
  }

  _editDataWorkout(index, newWorkout) {
    this.#workouts.splice(index, 1, newWorkout);
    this._clearWorkoutsList();
    this._reset();
    this._addWorkoutsToLocalStorage.call(this);
    this.#workouts.forEach(work => this._displayWorkoutToSidebar(work));
    this.changesSavedPopup.call(this);
  }

  changesSavedPopup() {
    const message = document.createElement('div');
    message.classList.add('changes-saved-popup');
    message.innerHTML = `
      <p>–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</p>`;
    modalInfoWorkout.prepend(message);
    setTimeout(() => {
      message.classList.add('animation-back');
    }, 1500);
    setTimeout(() => {
      message.classList.add('hidden');
    }, 2500);
  }
}

class Workout {
  _id = nanoid();
  clickNumber = 0;

  constructor(distance, duration, coords) {
    this.distance = distance;
    this.duration = duration;
    this.coords = coords;
    this.date = new Intl.DateTimeFormat('ru-RU').format(new Date());
  }

  click() {
    this.clickNumber++;
  }
}

class Running extends Workout {
  type = 'running';
  constructor(distance, duration, coords, temp) {
    super(distance, duration, coords);
    this.temp = temp;
    this.calculatePace();
  }
  calculatePace() {
    this.pace = this.duration / this.distance;
  }
}

class Cycling extends Workout {
  type = 'cycling';
  constructor(distance, duration, coords, climb) {
    super(distance, duration, coords);
    this.climb = climb;
    this.calculateSpeed();
  }
  calculateSpeed() {
    this.speed = this.distance / (this.duration / 60);
  }
}

const app = new App();
